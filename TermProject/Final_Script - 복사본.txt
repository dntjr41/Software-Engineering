(Slide 1) - 표지
안녕하세요. 7팀의 발표를 맡은 심우석입니다. 
7팀의 팀프로젝트 발표를 시작하겠습니다.

(Slide 2) - 목차
목차는 다음과 같습니다.

(Slide 3) - 주제
저희 팀의 주제는 도서관 이용 및 운영 프로그램입니다.

이 프로그램을 통해 사용자들은 도서 대출 및 반환을 더 간편하게
수행하고 사서들은 도서관을 편리하게 관리할 수 있습니다.
사용자들의 편의성을 제공하기 위해 이 주제를 선정했습니다.
이렇게 사용자들의 편의성을 제공하기 위해 이 주제를 선정했습니다.

(Slide 4) - Requirement analysis - Functional Requirement
기능적인 요구사항을 보시면 저희는 사용자와, 도서관 관리자
총 2개의 Stakeholders로 나눠서 봤습니다.

기능들을 살펴보면 공통적으로 사용자와 관리자는
프로그램에 로그인을 해야 접속이 가능합니다.
만약 사용자가 아이디가 없다면 회원가입 후 로그인을 해야 합니다.

사용자는 책의 카테고리를 정해 원하는 책을 검색하고,
도서를 대출, 반납할 수 있습니다. 또한 열람실의 좌석을 예약할 수 있습니다.
관리자는 책을 추가, 삭제하고 회원들의 정보를 열람할 수 있습니다.

(Slide 5) - Requirement analysis - Non-functional Requirement
비기능적 요구사항을 살펴보겠습니다.
첫째, 사용성의 경우
사용자가 프로그램 기능을 간략하게 볼 수 있도록 간단한 UI를 구성합니다.
또한 프로그램의 서버는 따로 구축하여 프로그램 전체의 사이즈,
데이터를 줄임과 동시에 속도 관리 측면에서 이점을 가져왔습니다.

둘째, 신뢰성의 경우
프로그램의 안정성을 위해 Jmeter와 같은 도구를 이용해 
많은 동시 접속자의 상황을 테스트했는데 여기서
나온 문제점들을 지속적으로 수정했습니다.

보안의 경우
프로그램은 관리자와 사용자가 사용하는 프로그램이 서로 분리되어 있어
사용자는 다른 사용자들의 정보 혹은 도서 DB에 접근할 수 없습니다.
이를 통해서 프로그램의 보안을 강화 했습니다.

세번째로 퍼포먼스 부분입니다.
도서 검색을 하는 것과 검색 정보를 표시하는 것을 5초 이내에 실행되도록 했습니다.
거기에 더해, 사용자의 정보, 도서 대출 / 반납 현황, 도서 DB의 변화 등이
데이터베이스 서버에 즉시 반영되게 했습니다.
이를 통해 프로그램을 사용할 때의 속도와 능률을 높일 수 있었습니다.

(Slide 6) - System Modeling - Scenarios
프로그램 이용의 시나리오입니다.
유저가 책을 검색하고, 선택한 책의 대출정보를 알아온 다음,
책을 대출하거나 다음 책을 선택는 것
사서는 로그인을 한 후 유저정보를 확인했습니다.

(Slide 7) - System Modeling - Interaction
시나리오의 순서에 따른 Interaction model을
Sequence 다이아그램으로 보시면 다음과 같습니다.
유저와 사서가 요청한 일을 관리 시스템과 DB를 이용해 수행한다.

(Slide 8) - System Modeling - Interaction
이것은 Use case 다이아그램으로 표현 한 것 입니다.
순서에 따른 시스템과의 상호작용을 나타냈습니다.

(Slide 8) - System Modeling – Structure models
시스템에 필수적인 도서 데이터베이스, 유저, 관리자,
이 3개의 class를 중심으로 class diagram을 구성해봤습니다.

(Slide 9) - System Modeling – State model
State 다이어그램으로 모델링을 해보았는데
각각 유저와 관리자의 입장에서의 시스템 작동 다이어그램을 작성해보았습니다.

(Slide 10) - Architecture Design
여러 구조들을 염두해 두었었는데 저희는
어플리케이션의 아키텍쳐 디자인은 Layered와 
Client – server Pattern을 복합적으로 사용했습니다.

저희 프로젝트의 대략적인 아키텍처 디자인입니다.
먼저 서비스는 크게 사용자 관리와 책 관리로 나누어 집니다.
어플리케이션에서는 회원가입 및 로그인, 책 검색, 대출, 반납
추가, 삭제, 자리 예약, 사용자 관리 등의 서비스를 제공합니다.
그리고 유틸리티 서비스로는 인터페이싱, 사용자 저장, 검색을 제공합니다.

(Slide 11) - Architecture Design ????
이 그림은 저희 프로그램의 네트워크를 나타내는 아키텍처 디자인 입니다.
사용자가 어플리케이션에 접속을 하면 어플리케이션은 서버와 접속합니다.
그러면 서버는 연결된 데이터베이스를 통해 접속한 사용자의 데이터들을
어플리케이션으로 보내줍니다.

(Slide 12) - Implementation
저희 팀은 프로젝트를 앱으로 구현했고 프로그램은
안드로이드 스튜디오를 사용했습니다. 그리고 프로젝트를 더 효율적으로
구현하기 위해서는 데이터베이스가 필요하지만 안드로이드 스튜디오는
보안 상의 문제 때문에 데이터베이스 드라이버를 지원하지 않아
자체적인 웹서버를 구축했습니다.
그리고 MySQL 서버 안의 데이터베이스에 사용자, 도서 등의 테이블을 만들었습니다.
그후 데이터베이스에 접속하기 위한 php형식의 웹 서버 프로그램 파일을 만들었습니다.

(Slide 13) - Demo
앱 실행 영상을 보여드리겠습니다. 먼저 사용자용 실행 영상입니다.
우선 회원가입을 합니다. 그리고 로그인을 하면 홈화면이 나옵니다.

Book list버튼을 누르면 책 종류와 발행연도의 스피너가 나옵니다.
각각 선택 후 검색 버튼을 누르면 조건에 맞는 책이 나옵니다.

그리고 Loan 버튼을 누르면 해당 책을 빌릴 수 있습니다.
책 두 권을 빌려보겠습니다.
만약 조건에 맞는 책이 없다면 알림 창이 뜹니다.

그리고 나서 loan book버튼을 누르면 사용자가 빌린 책 리스트가 나오고
return 버튼을 누르면 해당 책이 반납됩니다.
5번 책을 반납하면 해당 책이 사라져 있는 것을 볼 수 있습니다.

마지막 seat 버튼을 누르면 열람실 자리를 예약할 수 있습니다.
원하는 자리를 누르면 예약되었다는 토스트 메시지가 뜹니다.

다음은 관리자용 실행 영상입니다.
관리자는 이미 아이디와 비밀번호가 manager라고 설정되어 있기
때문에 따로 회원가입을 해주지 않습니다. 로그인 후 홈화면이 나옵니다.

Add book 버튼을 누르면 책을 추가하는 버튼과 현재 등록되어
있는 책들의 리스트가 나옵니다. 버튼을 누르면 새 창이 떠서 새 책을 입력할 수 있습니다.
입력하고 나면 책 리스트에 새 책이 등록된 것을 볼 수 있습니다.

그 다음 Delete book 버튼을 누르면 삭제 버튼과 현재
등록되어 있는 책 리스트가 나옵니다. 여기서 1번 책을 하나 삭제해보겠습니다.
그러면 책 리스트에서 해당 책이 사라진 것을 볼 수 있습니다.
마지막으로 manage버튼을 누르면 현재 프로그램에 등록되어 있는
사람들의 목록을 볼 수 있습니다.

(Slide 15) - Configuration Management
개발환경에 대한 형상관리는 안드로이드 스튜디오 4.0
안드로이드 10에 맞춰서 작업했습니다.

Subversion을 통해 프로그램의 버전관리를 했습니다.
또한 VisualSVN server라는 프로그램을 이용해 SVN server를 구축했고
거기에 SVN Data를 저장했습니다.

버전 관리는 Centralized Version Control을 이용해 일부분의 변화는 
각자 업데이트 해주었고 프로그램의 큰 변화가 있었을 땐 혼동을 방지하기 위해
Server에 서로가 올린 코드들을 한명이 종합하여 확인하고 수정했습니다.

(Slide 15) - Configuration Management2
그리고 Stroage Management 같은 경우는 VisualSVN server를
이용해 수정시간을 확인하며 서로 놓친 부분, 혹은 겹친 부분이
있는지 확인해가며 작업했습니다.

(Slide 16) - Unit test
유닛 테스트는 안드로이드 스튜디오에 내장되어 있는 junit을 이용하여
각 함수에 대한 test코드를 작성한 다음, 결과를 확인, 수정했습니다.

(Slide 17) - Test Case Generation
Test case Genration을 위해 안드로이드 스튜디오에 내장되어 있는
Espresso 라는 기능을 사용했습니다.

특정 상황 예를 들어 1. 로그인 – 2. 회원가입 – 3. 메인화면 등의 연속적인
상황을 구성하여 Testing 할 수 있었는데, 
Activity를 추가할 때마다 Espresso를 통해 어느 기능에 문제가 있는지
확인했고, 코드의 알고리즘 부분에서 우리가 놓친것이 있다면
그 부분을 수정하고 다시 Testing을 했다.

(1번 사진처럼 코드를 직접 입력할 수 도 있고, 코드를 직접 입력하지 않아도
UI를 통해 내가 선택한 것을 자동으로 실행 후 결과를 알려주었기 때문에
보다 편리하게 이용할 수 있었습니다.)

(Slide 18) - Test Case Generation
특정 function 혹은 activity에 오류가 있으면 이런 식으로 알려주는데
이것을 통해 오류를 줄여 나갔다.

(Slide 19) - Test coverage analysis
테스트 커버리지는 안드로이드 스튜디오에 내장되어 있는 도구인
JaCoCo를 사용하였다. 비록 시도 했을 때 오류가 나왔지만 이것으로
테스트가 얼마나 진척되었는지 다시 살펴볼 수 있었습니다.

(Slide 20) - Performance Testing 
Performance Testing에선 Jmeter라는 프로그램을 이용했습니다.
실행 했을 때 Traffic이 몰릴 수 있는 몇몇 상황을 실험했습니다.

첫번째로 5000명의 관리자들이 동시에 도서를 추가 / 삭제하는 기능을 실행했을 때,
두번째로 5000명과 10000명의 회원 / 관리자가 동시에 로그인을 시도할 때.
Throughput을 보시면 이용자가 늘어날 수록 시간이
더 늘어나는 것 을 보실 수 있습니다.
하지만 Error는 0%로 프로그램을 이용하는 것에는 문제가 없었습니다.

(Slide 21) - Performance Testing 2
세번째로 10000명이 회원가입을 할 때 프로그램 반응시간 그래프입니다.
직후엔 시간이 걸리지만 그후엔 점차 줄어들어 서버를 안정적으로 사용하였습니다.

몇가지 상황설정과 실험을 통해서 프로그램이 많은 사람들의 동시적인 사용에도
안정적으로 작동한다는 것을 확인하였습니다.

End
이상으로 발표를 마치겠습니다. 감사합니다.